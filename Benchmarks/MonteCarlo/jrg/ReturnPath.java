

import jsr166y.forkjoin.*;
/**
  * Class for representing the returns of a given security.
  *
  * <p>To do list:
  * <ol>
  *   <li>Define a window over which the mean drift and volatility
  *       are calculated.</li>
  *   <li>Hash table to reference {DATE}->{pathValue-index}.</li>
  * </ol>
  *
  * @author H W Yau
  * @version $Revision: 1.21 $ $Date: 1999/02/16 18:52:41 $
  */
public class ReturnPath<region R> extends PathId<R> {
	
  //------------------------------------------------------------------------
  // Class variables.
  //------------------------------------------------------------------------
  /**
    * A class variable, for setting whether to print debug messages or not.
    */
  public static final boolean DEBUG=true;
  /**
    * Class variable, for defining the prompt to print in front of debug
    * messages.
    */
  protected static final String prompt="ReturnPath> ";
  /**
    * Flag for indicating one of the return definitions, via:
    *       u_i = \ln{\frac{S_i}{S_{i-1}}}
    * corresponding to the instantaneous compounded return.
    */
  public static final int COMPOUNDED = 1;

  /**
    * Flag for indicating one of the return definitions, via:
    *       u_i = \frac{S_i - S_{i-1}}{S_i}
    * corresponding to the instantaneous non-compounded return.
    */
  public static final int NONCOMPOUNDED = 2;

  //------------------------------------------------------------------------
  // Instance variables.
  //------------------------------------------------------------------------
  /**
    * An instance variable, for storing the return values.
    */
  private final PathValue<R> pathValue;
  /**
    * The number of accepted values in the rate path.
    */
  private final int nPathValue;
  /**
    * Integer flag for indicating how the return was calculated.
    */
  private final int returnDefinition;
  /**
    * Value for the expected return rate.
    */
  private double expectedReturnRate in R = Double.NaN;
  /**
    * Value for the volatility, calculated from the return data.
    */
  private double volatility in R = Double.NaN;
  /**
    * Value for the volatility-squared, a more natural quantity
    * to use for many of the calculations.
    */
  private double volatility2 in R = Double.NaN;
  /**
    * Value for the mean of this return.
    */
  private double mean in R = Double.NaN;
  /**
    * Value for the variance of this return.
    */
  private double variance in R = Double.NaN;

  //------------------------------------------------------------------------
  // Constructors.
  //------------------------------------------------------------------------
  /**
    * Default constructor.
    */
  public ReturnPath() {
    super();
    set_prompt(prompt);
    set_DEBUG(DEBUG);
    pathValue = null;
    nPathValue = 0;
    returnDefinition = 0;
  }

  /**
    * Another constructor.
    *
    * @param pathValue for creating a return path with a precomputed path
    *                  value.  Indexed from 1 to <code>nPathArray-1</code>.
    * @param nPathValue the number of accepted data points in the array.
    * @param returnDefinition to tell this class how the return path values
    *                         were computed.
    */
  public ReturnPath(PathValue<R> pathValue, int nPathValue, int returnDefinition) 
      writes R
  {
      set_prompt(prompt);
      set_DEBUG(DEBUG);
      this.pathValue = pathValue;
      this.nPathValue = nPathValue;
      this.returnDefinition = returnDefinition;
  }

  //------------------------------------------------------------------------
  // Methods.
  //------------------------------------------------------------------------
  //------------------------------------------------------------------------
  // Accessor methods for class ReturnPath.
  // Generated by 'makeJavaAccessor.pl' script.  HWY.  20th January 1999.
  //------------------------------------------------------------------------
  /**
    * Accessor method for private instance variable <code>pathValue</code>.
    *
    * @return Value of instance variable <code>pathValue</code>.
    * @exception DemoException thrown if instance variable <code>pathValue</code> is undefined.
    */
  public PathValue<R> get_pathValue() throws DemoException {
    if( this.pathValue == null )
      throw new DemoException("Variable pathValue is undefined!");
    return(this.pathValue);
  }
  /**
    * Accessor method for private instance variable <code>nPathValue</code>.
    *
    * @return Value of instance variable <code>nPathValue</code>.
    * @exception DemoException thrown if instance variable <code>nPathValue</code> is undefined.
    */
  public int get_nPathValue() throws DemoException {
    if( this.nPathValue == 0 )
      throw new DemoException("Variable nPathValue is undefined!");
    return(this.nPathValue);
  }
  /**
    * Accessor method for private instance variable <code>returnDefinition</code>.
    *
    * @return Value of instance variable <code>returnDefinition</code>.
    * @exception DemoException thrown if instance variable <code>returnDefinition</code> is undefined.
    */
  public int get_returnDefinition() throws DemoException {
    if( this.returnDefinition == 0 )
      throw new DemoException("Variable returnDefinition is undefined!");
    return(this.returnDefinition);
  }
  /**
    * Accessor method for private instance variable <code>expectedReturnRate</code>.
    *
    * @return Value of instance variable <code>expectedReturnRate</code>.
    * @exception DemoException thrown if instance variable <code>expectedReturnRate</code> is undefined.
    */
  public double get_expectedReturnRate() 
      reads R
      throws DemoException 
  {
    if( this.expectedReturnRate == Double.NaN )
      throw new DemoException("Variable expectedReturnRate is undefined!");
    return(this.expectedReturnRate);
  }
  /**
    * Accessor method for private instance variable <code>volatility</code>.
    *
    * @return Value of instance variable <code>volatility</code>.
    * @exception DemoException thrown if instance variable <code>volatility</code> is undefined.
    */
  public double get_volatility() 
      reads R
      throws DemoException 
  {
    if( this.volatility == Double.NaN )
      throw new DemoException("Variable volatility is undefined!");
    return(this.volatility);
  }
  /**
    * Accessor method for private instance variable <code>volatility2</code>.
    *
    * @return Value of instance variable <code>volatility2</code>.
    * @exception DemoException thrown if instance variable <code>volatility2</code> is undefined.
    */
  public double get_volatility2() 
      reads R
      throws DemoException 
  {
    if( this.volatility2 == Double.NaN )
      throw new DemoException("Variable volatility2 is undefined!");
    return(this.volatility2);
  }
  /**
    * Accessor method for private instance variable <code>mean</code>.
    *
    * @return Value of instance variable <code>mean</code>.
    * @exception DemoException thrown if instance variable <code>mean</code> is undefined.
    */
  public double get_mean() throws DemoException {
    if( this.mean == Double.NaN )
      throw new DemoException("Variable mean is undefined!");
    return(this.mean);
  }
  /**
    * Accessor method for private instance variable <code>variance</code>.
    *
    * @return Value of instance variable <code>variance</code>.
    * @exception DemoException thrown if instance variable <code>variance</code> is undefined.
    */
  public double get_variance() throws DemoException {
    if( this.variance == Double.NaN )
      throw new DemoException("Variable variance is undefined!");
    return(this.variance);
  }
  //------------------------------------------------------------------------
  /**
    * Method to calculate the expected return rate from the return data,
    * using the relationship:
    *    \mu = \frac{\bar{u}}{\Delta t} + \frac{\sigma^2}{2}
    *
    * @exception DemoException thrown one tries to obtain an undefined variable.
    */
  public void computeExpectedReturnRate() 
      writes R
      throws DemoException 
  {
    this.expectedReturnRate = mean/get_dTime() + 0.5*volatility2;
  }
  /**
    * Method to calculate <code>volatility</code> and <code>volatility2</code>
    * from the return path data, using the relationship, based on the
    * precomputed <code>variance</code>. 
    *   \sigma^2 = s^2\Delta t
    * 
    * @exception DemoException thrown if one of the quantites in the
    *                          computation are undefined.
    */
  public void computeVolatility() 
      writes R
      throws DemoException 
  {
    if( this.variance == Double.NaN ) 
      throw new DemoException("Variable variance is not defined!");
    this.volatility2 = variance / get_dTime();
    this.volatility  = Math.sqrt(volatility2);
  }
  /**
    * Method to calculate the mean of the return, for use by other
    * calculations.
    *
    * @exception DemoException thrown if <code>nPathValue</code> is
    *            undefined.
    */

  public void computeMean() 
      writes R
      throws DemoException
  {
    if( this.nPathValue == 0 )
      throw new DemoException("Variable nPathValue is undefined!");
    this.mean = 0.0;
  
    //foreach (int i in 1, nPathValue) {
    //foreach (int i in 1, pathValue.length-1) {
    for (int i=1;i<pathValue.length;i++) {
    	mean += pathValue[i];
    }
  
    this.mean /= ((double)(nPathValue - 1.0));
  }
  /**
    * Method to calculate the variance of the retrun, for use by other
    * calculations.
    *
    * @exception DemoException thrown if the <code>mean</code> or
    *            <code>nPathValue</code> values are undefined.
    */
  public void computeVariance() 
      writes R
      throws DemoException
  {
    if( this.mean == Double.NaN || this.nPathValue == 0)
      throw new DemoException("Variable mean and/or nPathValue are undefined!");
    this.variance = 0.0;
      
    //foreach (int i in 1, pathValue.length-1) {
    for (int i=1;i<pathValue.length;i++) {
    	variance += (pathValue[i] - mean)*(pathValue[i] - mean);
    }
    
    this.variance /= ((double)(nPathValue - 1.0));
  }
  /**
    * A single method for invoking all the necessary methods which
    * estimate the parameters.
    *
    * @exception DemoException thrown if there is a problem reading any
    *            variables.
    */
  public void estimatePath() 
    writes R				    
    throws DemoException
  {
    computeMean();
    computeVariance();
    computeExpectedReturnRate();
    computeVolatility();
  }
  /**
    * Dumps the contents of the fields, to standard-out, for debugging.
    */
  public void dbgDumpFields() pure {
    super.dbgDumpFields();
//    dbgPrintln("nPathValue="        +this.nPathValue);
//    dbgPrintln("expectedReturnRate="+this.expectedReturnRate);
//    dbgPrintln("volatility="        +this.volatility);
//    dbgPrintln("volatility2="       +this.volatility2);
//    dbgPrintln("mean="              +this.mean);
//    dbgPrintln("variance="          +this.variance);
  }
}
